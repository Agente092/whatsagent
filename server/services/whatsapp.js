const { makeWASocket, DisconnectReason, useMultiFileAuthState } = require('baileys')
const { Boom } = require('@hapi/boom')
const QRCode = require('qrcode')
const EventEmitter = require('events')

class WhatsAppService extends EventEmitter {
  constructor() {
    super()
    this.sock = null
    this.qrCode = null
    this.qr = null
    this.isConnected = false
    this.lastSeen = null
    this.connectionAttempts = 0
    this.maxRetries = 5 // üîß PROYECTO-VENTAS: Conservador
    this.reconnectAttempts = 0
    this.maxReconnectAttempts = 5
    this.reconnectionDelay = 3000 // üîß PROYECTO-VENTAS: Delay base
    this.isReconnecting = false
    this.lastDisconnectReason = null
    this.healthInterval = null
    
    // üîß CR√çTICO: Crear directorio auth al inicializar (PROYECTO-VENTAS STYLE)
    this.initializeAuthDirectory()
  }

  // üîß NUEVO: Inicializar directorio de autenticaci√≥n
  initializeAuthDirectory() {
    const fs = require('fs')
    if (!fs.existsSync('./auth_info_baileys')) {
      fs.mkdirSync('./auth_info_baileys')
      console.log('üìÅ Auth directory created')
    }
  }

  // üîß M√âTODO DE RECONEXI√ìN EXACTO DEL PROYECTO-VENTAS
  handleReconnection(isTimeout = false) {
    if (this.isReconnecting) {
      console.log('üîÑ Ya hay una reconexi√≥n en progreso, ignorando...')
      return
    }

    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.log('‚ùå M√°ximo n√∫mero de intentos de reconexi√≥n alcanzado')
      this.isConnected = false
      this.isReconnecting = false
      this.emit('whatsapp-status', 'error')
      this.emit('system-error', {
        message: `Fall√≥ la reconexi√≥n despu√©s de ${this.maxReconnectAttempts} intentos. Intenta conectar manualmente.`
      })
      return
    }

    this.isReconnecting = true
    this.reconnectAttempts++

    // Para timeouts, usar delays m√°s cortos (PROYECTO-VENTAS STYLE)
    let delay
    if (isTimeout) {
      // Para timeouts: 1s, 2s, 4s, 8s, 16s (m√°s agresivo)
      delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts - 1), 16000)
    } else {
      // Para otros errores: 3s, 6s, 12s, 24s (normal)
      delay = this.reconnectionDelay * Math.pow(2, this.reconnectAttempts - 1)
    }

    const reasonText = isTimeout ? '(Timeout)' : `(${this.lastDisconnectReason})`
    console.log(`üîÑ Reconectando WhatsApp... ${reasonText} (Intento ${this.reconnectAttempts}/${this.maxReconnectAttempts}) - Esperando ${delay}ms`)
    this.emit('whatsapp-status', 'reconnecting')

    setTimeout(() => {
      if (this.isReconnecting) { // Verificar que a√∫n necesitamos reconectar
        this.connect()
      }
    }, delay)
  }

  async connect() {
    try {
      // üîß CR√çTICO: Si no estamos en proceso de reconexi√≥n autom√°tica, resetear contadores (PROYECTO-VENTAS STYLE)
      if (!this.isReconnecting) {
        this.connectionAttempts = 0
        this.reconnectAttempts = 0 // üîß NUEVO: Resetear tambi√©n reconnectAttempts
        console.log('üîÑ Iniciando conexi√≥n manual - Reseteando contadores de reconexi√≥n')
      }

      // üîß CR√çTICO: Limpiar QR anterior ANTES de conectar (PROYECTO-VENTAS STYLE)
      this.qr = null
      this.qrCode = null
      console.log('üß© QR anterior limpiado - Preparando nueva generaci√≥n')

      // üîß NUEVO: Asegurar que el directorio existe
      this.initializeAuthDirectory()

      const { state, saveCreds } = await useMultiFileAuthState('./auth_info_baileys')

      this.sock = makeWASocket({
        auth: state,
        printQRInTerminal: false,
        // üîß CONFIGURACIONES EXACTAS DEL PROYECTO-VENTAS (CRITICAL!)
        connectTimeoutMs: 45000, // üîß REDUCIDO: 45 segundos (antes 60s) para detectar problemas m√°s r√°pido
        defaultQueryTimeoutMs: 30000, // üîß REDUCIDO: 30 segundos para queries (antes 60s)
        keepAliveIntervalMs: 15000, // üîß REDUCIDO: 15 segundos keep-alive (antes 25s) - M√°s frecuente
        markOnlineOnConnect: true, // Marcar como online al conectar
        syncFullHistory: false, // No sincronizar historial completo
        // Configuraciones de reintentos m√°s eficientes
        retryRequestDelayMs: 250, // üîß REDUCIDO: 250ms entre reintentos (antes 500ms)
        maxMsgRetryCount: 2, // üîß REDUCIDO: M√°ximo 2 reintentos por mensaje (antes 3)
        logger: {
          level: 'silent',
          child: () => ({
            level: 'silent',
            trace: () => {},
            debug: () => {},
            info: () => {},
            warn: () => {},
            error: () => {},
            fatal: () => {}
          }),
          trace: () => {},
          debug: () => {},
          info: () => {},
          warn: () => {},
          error: () => {},
          fatal: () => {}
        }
      })

      // üîß MANEJAR EVENTOS DE CONEXI√ìN EXACTO DEL PROYECTO-VENTAS
      this.sock.ev.on('connection.update', async (update) => {
        const { connection, lastDisconnect, qr } = update

        if (qr) {
          this.qr = qr
          const qrImage = await QRCode.toDataURL(qr)
          this.qrCode = qrImage
          // üîß CR√çTICO: Emitir AMBOS eventos como Proyecto-ventas
          this.emit('qr-code', qrImage)
          this.emit('whatsapp-status', 'connecting')
          console.log('üì± C√≥digo QR generado para WhatsApp - NUEVO QR!')
          console.log(`üîç QR Length: ${qr.length}, Image size: ${qrImage.length} bytes`)
        }

        if (connection === 'close') {
          const statusCode = lastDisconnect?.error?.output?.statusCode
          this.lastDisconnectReason = statusCode

          console.log('üì± Conexi√≥n cerrada. C√≥digo:', statusCode, 'Raz√≥n:', DisconnectReason[statusCode] || 'Desconocida')
          
          // Logging detallado de la desconexi√≥n
          const disconnectionInfo = {
            statusCode: statusCode,
            reason: DisconnectReason[statusCode] || 'Unknown',
            lastError: lastDisconnect?.error?.message,
            connectionAttempts: this.connectionAttempts,
            reconnectAttempts: this.reconnectAttempts,
            wasConnected: this.isConnected,
            timestamp: new Date().toISOString()
          }
          
          console.log('üîç Disconnection details:', JSON.stringify(disconnectionInfo, null, 2))

          // Manejar c√≥digo 408 (timedOut) - timeout de conexi√≥n
          if (statusCode === DisconnectReason.timedOut) {
            console.log('‚è∞ TIMEOUT DETECTADO - Reconectando con delay reducido...', {
              timeoutType: 'CONNECTION_TIMEOUT',
              lastSeen: this.lastSeen,
              connectionDuration: this.lastSeen ? Date.now() - new Date(this.lastSeen).getTime() : 'unknown',
              reconnectAttempts: this.reconnectAttempts,
              maxAttempts: this.maxReconnectAttempts
            })
            this.isConnected = false
            // Para timeouts, usar delay m√°s corto y menos intentos antes de dar up
            this.handleReconnection(true) // true indica que es un timeout
            return
          }

          // Manejar c√≥digo 440 (connectionReplaced) - m√∫ltiples instancias
          if (statusCode === DisconnectReason.connectionReplaced) {
            console.log('üö® CONEXI√ìN REEMPLAZADA - Posible m√∫ltiple instancia detectada', {
              errorType: 'CONNECTION_REPLACED',
              action: 'STOPPING_RECONNECTIONS',
              reconnectAttempts: this.reconnectAttempts,
              connectionAttempts: this.connectionAttempts
            })
            console.log('‚ö†Ô∏è Deteniendo reconexiones autom√°ticas para evitar bucle infinito')
            this.isConnected = false
            this.isReconnecting = false
            this.reconnectAttempts = 0
            this.emit('whatsapp-status', 'error')
            this.emit('system-error', {
              message: 'Conexi√≥n reemplazada por otra instancia. Verifica que no haya m√∫ltiples bots corriendo.'
            })
            return // No reconectar autom√°ticamente
          }

          if (statusCode === DisconnectReason.loggedOut) {
            // Sesi√≥n cerrada desde el tel√©fono - Auto-limpiar
            console.log('üö® Sesi√≥n cerrada desde WhatsApp - Iniciando auto-limpieza...')
            this.isConnected = false
            this.isReconnecting = false
            this.reconnectAttempts = 0
            this.emit('whatsapp-status', 'session-invalid')

            // Auto-limpiar sesi√≥n despu√©s de un momento
            setTimeout(async () => {
              try {
                await this.clearSession()
                this.emit('whatsapp-status', 'ready-to-connect')
              } catch (error) {
                console.error('Error en auto-limpieza:', error)
                this.emit('whatsapp-status', 'error')
              }
            }, 2000)

          } else if (statusCode !== DisconnectReason.loggedOut && statusCode !== DisconnectReason.connectionReplaced) {
            // Implementar backoff exponencial para otras desconexiones
            this.handleReconnection()
          } else {
            console.log('‚ùå WhatsApp desconectado')
            this.isConnected = false
            this.isReconnecting = false
            this.emit('whatsapp-status', 'disconnected')
          }
        } else if (connection === 'open') {
          console.log('‚úÖ WhatsApp conectado exitosamente')
          this.isConnected = true
          this.isReconnecting = false
          this.reconnectAttempts = 0 // Reset contador en conexi√≥n exitosa
          this.qr = null
          this.qrCode = null
          
          // üîÑ EMISIONES M√öLTIPLES PARA SINCRONIZACI√ìN
          this.emit('whatsapp-ready')
          this.emit('whatsapp-status', 'connected')
          this.emit('connected') // üéÜ EVENTO PRINCIPAL
          
          // üîÑ DELAY PARA ASEGURAR SINCRONIZACI√ìN
          setTimeout(() => {
            this.emit('whatsapp-status', 'connected')
            this.emit('connected')
            console.log('‚úÖ Estados de conexi√≥n re-emitidos para sincronizaci√≥n')
          }, 500)
        }
      })

      // Guardar credenciales cuando cambien
      this.sock.ev.on('creds.update', saveCreds)

      // Manejar mensajes entrantes
      this.sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0]
        if (!message.key.fromMe && message.message) {
          const from = message.key.remoteJid
          const body = this.extractMessageText(message)
          
          if (body && from) {
            // üö´ FILTRO CR√çTICO: Solo procesar mensajes PRIVADOS, NO grupos
            if (from.includes('@g.us')) {
              console.log(`üö´ Mensaje de GRUPO ignorado: ${from} - "${body.substring(0, 50)}..."`)
              return // NO procesar mensajes de grupos
            }
            
            // ‚úÖ VERIFICACI√ìN ADICIONAL: Solo mensajes privados directos
            if (!from.endsWith('@s.whatsapp.net')) {
              console.log(`üö´ Mensaje no privado ignorado: ${from} - Tipo: ${from.includes('@g.us') ? 'GRUPO' : 'DESCONOCIDO'}`)
              return
            }
            
            // Clean phone number format
            const cleanPhone = from.replace('@s.whatsapp.net', '')
            
            console.log(`‚úÖ Mensaje PRIVADO procesado de ${cleanPhone}: ${body.substring(0, 100)}...`)
            
            this.emit('message', {
              from: cleanPhone,
              body: body.trim(),
              timestamp: new Date()
            })
          }
        }
      })

    } catch (error) {
      console.error('Error conectando WhatsApp:', error)
      throw error
    }
  }

  extractMessageText(message) {
    if (message.message?.conversation) {
      return message.message.conversation
    }
    
    if (message.message?.extendedTextMessage?.text) {
      return message.message.extendedTextMessage.text
    }
    
    if (message.message?.imageMessage?.caption) {
      return message.message.imageMessage.caption
    }
    
    if (message.message?.videoMessage?.caption) {
      return message.message.videoMessage.caption
    }
    
    return null
  }

  async disconnect() {
    if (this.sock) {
      await this.sock.logout()
      this.sock = null
      this.isConnected = false
      this.emit('whatsapp-status', 'disconnected')
      console.log('üì± WhatsApp desconectado')
    }
  }

  // üîß CLEARASESSION EXACTO DEL PROYECTO-VENTAS
  async clearSession() {
    try {
      console.log('üßπ Iniciando limpieza de sesi√≥n WhatsApp...')

      // üîß PASO 2: Desconectar socket si existe
      if (this.sock) {
        try {
          await this.sock.logout()
          console.log('‚úÖ Socket logout exitoso')
        } catch (error) {
          console.log('‚ö†Ô∏è Error durante logout (esperado si sesi√≥n inv√°lida):', error.message)
        }
        this.sock.end()
        this.sock = null
        console.log('‚úÖ Socket cerrado y limpiado')
      }

      // üîß PASO 3: Eliminar archivos COMPLETAMENTE
      const fs = require('fs')
      if (fs.existsSync('./auth_info_baileys')) {
        console.log('üóëÔ∏è Eliminando archivos de autenticaci√≥n...')
        
        // Listar archivos antes de eliminar
        const files = fs.readdirSync('./auth_info_baileys')
        console.log(`üìÅ Archivos encontrados: ${files.length} - ${files.join(', ')}`)
        
        // Eliminar directorio completo
        fs.rmSync('./auth_info_baileys', { recursive: true, force: true })
        console.log('‚úÖ Directorio auth_info_baileys eliminado COMPLETAMENTE')
      }

      // üîß PASO 4: Recrear directorio limpio
      this.initializeAuthDirectory()
      console.log('‚úÖ Directorio auth recreado limpio')

      // Notificar al frontend
      this.emit('whatsapp-status', 'session-cleared')
      this.emit('session-cleared', {
        message: 'Sesi√≥n limpiada exitosamente. Puedes reconectar ahora.'
      })

      console.log('‚úÖ Sesi√≥n WhatsApp limpiada exitosamente')
      return { success: true, message: 'Sesi√≥n limpiada exitosamente' }

    } catch (error) {
      console.error('‚ùå Error limpiando sesi√≥n:', error)
      this.emit('session-clear-error', { error: error.message })
      throw new Error('Error al limpiar sesi√≥n: ' + error.message)
    }
  }

  async forceReconnect() {
    try {
      console.log('üîÑ Forzando reconexi√≥n WhatsApp...')

      // Limpiar sesi√≥n primero
      await this.clearSession()

      // Esperar un momento
      await new Promise(resolve => setTimeout(resolve, 2000))

      // Reconectar
      await this.connect()

      console.log('‚úÖ Reconexi√≥n forzada completada')
      return { success: true, message: 'Reconexi√≥n exitosa' }

    } catch (error) {
      console.error('‚ùå Error en reconexi√≥n forzada:', error)
      throw error
    }
  }

  // üîß NUEVO: M√©todo espec√≠fico para forzar regeneraci√≥n de QR
  async forceNewQR() {
    try {
      console.log('üîÑ FORZANDO REGENERACI√ìN DE QR - Limpieza total...')
      
      // Paso 1: Limpiar completamente
      await this.clearSession()
      
      // Paso 2: Esperar
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Paso 3: Conectar para generar NUEVO QR
      console.log('üÜï Iniciando conexi√≥n para NUEVO QR...')
      await this.connect()
      
      return { success: true, message: 'Nuevo QR generado exitosamente' }
      
    } catch (error) {
      console.error('‚ùå Error generando nuevo QR:', error)
      throw error
    }
  }

  async sendMessage(to, text) {
    try {
      if (!this.sock || !this.isConnected) {
        throw new Error('WhatsApp not connected')
      }

      // Format phone number
      const formattedNumber = to.includes('@') ? to : `${to}@s.whatsapp.net`
      
      await this.sock.sendMessage(formattedNumber, { text })
      console.log(`üì§ Message sent to ${to}: ${text.substring(0, 50)}...`)
      
      return true
    } catch (error) {
      console.error('‚ùå Send message error:', error)
      throw error
    }
  }

  getStatus() {
    return {
      isConnected: this.isConnected,
      lastSeen: this.lastSeen || 'Nunca',
      qrCode: this.qrCode,
      connectionAttempts: this.connectionAttempts,
      isReconnecting: this.isReconnecting,
      lastDisconnectReason: this.lastDisconnectReason
    }
  }

  // Health check
  isHealthy() {
    return this.isConnected && this.sock
  }

  // Get connection info
  getConnectionInfo() {
    return {
      connected: this.isConnected,
      lastSeen: this.lastSeen,
      attempts: this.connectionAttempts,
      hasQR: !!this.qrCode,
      healthy: this.isHealthy()
    }
  }
}

module.exports = WhatsAppService
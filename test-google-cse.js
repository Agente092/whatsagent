/**
 * SCRIPT DE PRUEBA PARA GOOGLE CUSTOM SEARCH API
 * 
 * Este script valida que la configuraci√≥n de Google CSE funcione correctamente
 * y pueda buscar informaci√≥n real sobre la "One Big Beautiful Tax Bill"
 */

// Cargar variables de entorno desde .env
require('dotenv').config()

const InternetSearchService = require('./server/services/internetSearch')
const logger = require('./server/services/logger')

async function testGoogleCSE() {
  console.log('üîç PRUEBA DE GOOGLE CUSTOM SEARCH API')
  console.log('===================================\n')
  
  // Verificar variables de entorno
  const apiKey = process.env.GOOGLE_CSE_API_KEY
  const searchEngineId = process.env.GOOGLE_CSE_ID
  
  console.log('üìã Verificando configuraci√≥n...')
  console.log(`‚úÖ GOOGLE_CSE_API_KEY: ${apiKey ? 'Configurado' : '‚ùå NO configurado'}`)
  console.log(`‚úÖ GOOGLE_CSE_ID: ${searchEngineId ? 'Configurado' : '‚ùå NO configurado'}`)
  
  if (!apiKey || !searchEngineId) {
    console.log('\n‚ùå ERROR: Faltan variables de entorno')
    console.log('Por favor configura en el archivo .env:')
    console.log('GOOGLE_CSE_API_KEY="tu_api_key_aqui"')
    console.log('GOOGLE_CSE_ID="tu_search_engine_id_aqui"')
    console.log('\nSigue la gu√≠a en: CONFIGURACION-APIS-BUSQUEDA.md')
    return
  }
  
  if (apiKey === 'tu_google_api_key_aqui' || searchEngineId === 'tu_search_engine_id_aqui') {
    console.log('\n‚ö†Ô∏è  ADVERTENCIA: Las variables contienen valores de ejemplo')
    console.log('Por favor reemplaza con tus API keys reales')
    return
  }
  
  console.log('\nüöÄ Configuraci√≥n correcta, iniciando pruebas...\n')
  
  try {
    const searchService = new InternetSearchService()
    
    // Prueba 1: B√∫squeda espec√≠fica sobre la ley
    console.log('üìù PRUEBA 1: B√∫squeda de "One Big Beautiful Tax Bill"')
    console.log('=' * 50)
    
    const query1 = 'One Big Beautiful Tax Bill 2025'
    console.log(`üîç Buscando: "${query1}"`)
    
    const result1 = await searchService.search(query1)
    
    console.log('‚úÖ B√∫squeda completada')
    console.log(`üìè Longitud de respuesta: ${result1.length} caracteres`)
    
    if (result1.includes('RESULTADOS DE GOOGLE')) {
      console.log('‚úÖ Usando Google Custom Search API correctamente')
    } else if (result1.includes('RESULTADOS DE DUCKDUCKGO')) {
      console.log('‚ö†Ô∏è  Usando DuckDuckGo como fallback (Google no funcion√≥)')
    } else {
      console.log('‚ö†Ô∏è  Respuesta inesperada')
    }
    
    console.log('\nüìã Vista previa del resultado:')
    console.log('-' * 50)
    console.log(result1.substring(0, 400) + '...')
    console.log('-' * 50)
    
    // Prueba 2: B√∫squeda general
    console.log('\nüìù PRUEBA 2: B√∫squeda general de noticias fiscales')
    console.log('=' * 50)
    
    const query2 = 'tax reform news 2025'
    console.log(`üîç Buscando: "${query2}"`)
    
    const result2 = await searchService.search(query2)
    
    console.log('‚úÖ Segunda b√∫squeda completada')
    console.log(`üìè Longitud de respuesta: ${result2.length} caracteres`)
    
    // Prueba 3: Verificar l√≠mites
    console.log('\nüìù PRUEBA 3: Verificaci√≥n de estad√≠sticas')
    console.log('=' * 50)
    
    const stats = searchService.getStats()
    console.log('üìä Estad√≠sticas del servicio:')
    console.log(JSON.stringify(stats, null, 2))
    
    console.log('\nüéâ PRUEBAS COMPLETADAS EXITOSAMENTE')
    console.log('================================')
    console.log('‚úÖ Google Custom Search API funcionando')
    console.log('‚úÖ B√∫squedas reales ejecut√°ndose')
    console.log('‚úÖ Sistema listo para WhatsApp')
    
    console.log('\nüìã SIGUIENTE PASO:')
    console.log('Reinicia el servidor WhatsApp y prueba con el mensaje:')
    console.log('"Busca informaci√≥n sobre la ley One Big Beautiful Tax Bill"')
    
  } catch (error) {
    console.error('\n‚ùå ERROR EN LAS PRUEBAS:', error.message)
    
    if (error.message.includes('403')) {
      console.log('\nüîß POSIBLE SOLUCI√ìN:')
      console.log('- Verifica que el API Key sea correcto')
      console.log('- Aseg√∫rate de haber habilitado Custom Search API')
      console.log('- Revisa las cuotas en Google Cloud Console')
    } else if (error.message.includes('400')) {
      console.log('\nüîß POSIBLE SOLUCI√ìN:')
      console.log('- Verifica el Search Engine ID')
      console.log('- Aseg√∫rate de haber creado el motor de b√∫squeda')
    } else {
      console.log('\nüîß POSIBLE SOLUCI√ìN:')
      console.log('- Verifica tu conexi√≥n a internet')
      console.log('- Revisa los logs para m√°s detalles')
    }
  }
}

// Funci√≥n para mostrar ayuda de configuraci√≥n
function showConfigHelp() {
  console.log('üìã AYUDA DE CONFIGURACI√ìN')
  console.log('========================')
  console.log('')
  console.log('1. Ir a Google Cloud Console:')
  console.log('   https://console.cloud.google.com/')
  console.log('')
  console.log('2. Habilitar Custom Search API:')
  console.log('   https://console.cloud.google.com/apis/library/customsearch.googleapis.com')
  console.log('')
  console.log('3. Crear API Key:')
  console.log('   Credenciales ‚Üí Crear credenciales ‚Üí Clave de API')
  console.log('')
  console.log('4. Crear Search Engine:')
  console.log('   https://programmablesearchengine.google.com/')
  console.log('')
  console.log('5. Configurar variables en .env:')
  console.log('   GOOGLE_CSE_API_KEY="tu_api_key"')
  console.log('   GOOGLE_CSE_ID="tu_search_engine_id"')
}

// Ejecutar seg√∫n argumentos
if (require.main === module) {
  const args = process.argv.slice(2)
  
  if (args.includes('--help') || args.includes('-h')) {
    showConfigHelp()
  } else {
    testGoogleCSE().catch(console.error)
  }
}

module.exports = { testGoogleCSE, showConfigHelp }
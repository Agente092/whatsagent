/**
 * Script de prueba para la integraci√≥n de b√∫squeda en internet con GeminiService
 * Este script prueba la detecci√≥n de necesidad de b√∫squeda y la integraci√≥n completa
 */

const GeminiService = require('./server/services/gemini')
const KnowledgeBase = require('./server/services/knowledgeBase')

async function testGeminiInternetSearch() {
  console.log('üîç Iniciando prueba de integraci√≥n Gemini + B√∫squeda en internet...')
  
  // Crear instancias de los servicios
  const knowledgeBase = new KnowledgeBase()
  const geminiService = new GeminiService(null, null, knowledgeBase)
  
  // Pruebas de detecci√≥n de necesidad de b√∫squeda
  const testMessages = [
    '¬øCu√°l es el tipo de cambio del d√≥lar hoy?',
    'Necesito informaci√≥n sobre leyes nuevas de empresas en Per√∫',
    '¬øQu√© estrategias de inversi√≥n hay en Miami para peruanos?',
    '¬øCu√°les son las tasas de inter√©s actuales en Per√∫?',
    'Quiero crear una empresa offshore, ¬øqu√© opciones hay?',
    'Expl√≠came sobre estructuras empresariales',
    '¬øC√≥mo est√° la econom√≠a peruana en 2024?',
    'Necesito informaci√≥n sobre para√≠sos fiscales'
  ]
  
  console.log(`\nüìã Ejecutando ${testMessages.length} pruebas de detecci√≥n...\n`)
  
  for (const message of testMessages) {
    console.log(`\nüí¨ Mensaje: "${message}"`)
    
    // Probar detecci√≥n de b√∫squeda en tiempo real
    const needsSearch = geminiService.needsRealTimeSearch(message)
    console.log(`üîç Necesita b√∫squeda en tiempo real: ${needsSearch ? 'S√ç' : 'NO'}`)
    
    // Probar detecci√≥n de informaci√≥n internacional
    const needsInternational = geminiService.needsInternationalInfo(message)
    console.log(`üåê Necesita informaci√≥n internacional: ${needsInternational ? 'S√ç' : 'NO'}`)
    
    // Si necesita b√∫squeda, mostrar qu√© palabras clave la activaron
    if (needsSearch || needsInternational) {
      const lowerMessage = message.toLowerCase()
      const realTimeKeywords = [
        'actual', 'reciente', 'hoy', 'ahora', '√∫ltimo', 'nuevo',
        'noticia', 'evento', 'anuncio', 'publicaci√≥n',
        'nueva ley', 'modificaci√≥n', 'actualizaci√≥n legal', 'normativa nueva',
        'tasa', 'porcentaje', 'inter√©s', 'inflaci√≥n', 'tipo de cambio'
      ]
      
      const internationalKeywords = [
        'extranjero', 'internacional', 'europa', 'estados unidos', 'china', 'brasil',
        'miami', 'espa√±a', 'mexico', 'colombia', 'argentina', 'chile',
        'panam√°', 'costa rica', 'ecuador', 'uruguay', 'paraguay',
        'alemania', 'francia', 'italia', 'reino unido', 'jap√≥n',
        'australia', 'canad√°', 'm√©xico'
      ]
      
      const foundRealTime = realTimeKeywords.filter(k => lowerMessage.includes(k))
      const foundInternational = internationalKeywords.filter(k => lowerMessage.includes(k))
      
      if (foundRealTime.length > 0) {
        console.log(`üìå Palabras clave de tiempo real: ${foundRealTime.join(', ')}`)
      }
      
      if (foundInternational.length > 0) {
        console.log(`üåç Palabras clave internacionales: ${foundInternational.join(', ')}`)
      }
    }
  }
  
  // Prueba de construcci√≥n de prompt con b√∫squeda
  console.log('\nüîß Probando construcci√≥n de prompt con b√∫squeda...')
  try {
    const testMessage = '¬øCu√°l es la tasa de inter√©s actual en Per√∫?'
    const knowledgeContext = knowledgeBase.getContext()
    
    const conversationContext = {
      hasHistory: false,
      context: '',
      stage: 'initial',
      currentTopic: 'financial'
    }
    
    const prompt = geminiService.buildEnhancedPromptWithPersonality(
      testMessage,
      knowledgeContext,
      conversationContext,
      'business_query',
      null, // personalityInstructions
      null, // humanReasoningResult
      { name: 'Cliente de Prueba', phone: '+51999999999' }, // clientData
      { name: 'Empresa de Prueba', representative: { name: 'Asesor de Prueba' } } // companyData
    )
    
    console.log('‚úÖ Prompt construido exitosamente')
    console.log(`üìÑ Longitud del prompt: ${prompt.length} caracteres`)
    
    // Verificar que se incluy√≥ la secci√≥n de informaci√≥n en tiempo real
    if (prompt.includes('INFORMACI√ìN EN TIEMPO REAL')) {
      console.log('‚úÖ Secci√≥n de b√∫squeda en tiempo real incluida en el prompt')
    } else {
      console.log('‚ö†Ô∏è Secci√≥n de b√∫squeda en tiempo real NO encontrada en el prompt')
    }
    
  } catch (error) {
    console.error('‚ùå Error en prueba de construcci√≥n de prompt:', error.message)
  }
  
  console.log('\n‚úÖ Prueba de integraci√≥n Gemini + B√∫squeda en internet completada')
}

// Ejecutar prueba
if (require.main === module) {
  testGeminiInternetSearch().catch(console.error)
}

module.exports = { testGeminiInternetSearch }
/**
 * SCRIPT DE PRUEBA PARA LAS MEJORAS DE B√öSQUEDA
 * 
 * Este script valida que las mejoras implementadas funcionen correctamente
 * para extraer keywords optimizados y realizar b√∫squedas m√°s efectivas
 */

// Cargar variables de entorno desde .env
require('dotenv').config()

const GeminiService = require('./server/services/gemini')
const KnowledgeBase = require('./server/services/knowledgeBase')
const InternetSearchService = require('./server/services/internetSearch')

async function testSearchImprovements() {
  console.log('üîß PRUEBA DE MEJORAS DE B√öSQUEDA')
  console.log('===============================\n')
  
  try {
    // 1. Crear instancias de servicios
    console.log('üì¶ Inicializando servicios...')
    const knowledgeBase = new KnowledgeBase()
    const geminiService = new GeminiService(null, null, knowledgeBase)
    const searchService = new InternetSearchService()
    
    // 2. Probar extracci√≥n de keywords mejorada
    console.log('\nüîç Probando extracci√≥n de keywords optimizada...')
    
    const testMessages = [
      'hablame sobre la ley que salio este 2025 que se llama One Big beautiful tax Bill fue propuesta por donald trump',
      'que sabes de la nueva ley de impuestos de Estados Unidos 2025',
      'Beautiful Tax Bill informaci√≥n actualizada',
      'Trump tax reform 2025 news'
    ]
    
    for (const message of testMessages) {
      console.log(`\nüí¨ Mensaje original: "${message}"`)
      
      // Probar extracci√≥n de keywords
      const optimizedQuery = geminiService.extractSearchKeywords(message)
      console.log(`üéØ Keywords extra√≠dos: "${optimizedQuery}"`)
      
      // Verificar que sea m√°s corto y espec√≠fico
      if (optimizedQuery.length < message.length) {
        console.log('‚úÖ Query optimizado es m√°s conciso')
      } else {
        console.log('‚ö†Ô∏è  Query no se optimiz√≥ adecuadamente')
      }
      
      // Verificar que contenga t√©rminos relevantes
      if (optimizedQuery.toLowerCase().includes('beautiful') || 
          optimizedQuery.toLowerCase().includes('tax bill') ||
          optimizedQuery.toLowerCase().includes('2025')) {
        console.log('‚úÖ Contiene t√©rminos relevantes')
      } else {
        console.log('‚ö†Ô∏è  No contiene t√©rminos suficientemente relevantes')
      }
    }
    
    // 3. Probar b√∫squeda completa con keywords optimizados
    console.log('\nüåê Probando b√∫squeda completa con keywords optimizados...')
    
    const testQuery = 'hablame sobre la ley que salio este 2025 que se llama One Big beautiful tax Bill fue propuesta por donald trump'
    console.log(`üìù Query de prueba: "${testQuery}"`)
    
    // Extraer keywords optimizados
    const optimizedKeywords = geminiService.extractSearchKeywords(testQuery)
    console.log(`üîç Keywords optimizados: "${optimizedKeywords}"`)
    
    // Realizar b√∫squeda con keywords optimizados
    const searchResults = await searchService.search(optimizedKeywords)
    console.log(`‚úÖ B√∫squeda completada con keywords optimizados`)
    console.log(`üìè Longitud de respuesta: ${searchResults.length} caracteres`)
    
    // Verificar si contiene informaci√≥n relevante
    if (searchResults.includes('One Big Beautiful') || 
        searchResults.includes('Tax Bill') ||
        searchResults.includes('2025')) {
      console.log('‚úÖ Resultados contienen informaci√≥n relevante espec√≠fica')
    } else {
      console.log('‚ö†Ô∏è  Resultados podr√≠an no ser suficientemente espec√≠ficos')
    }
    
    // Vista previa de resultados
    console.log('\nüìã Vista previa de resultados:')
    console.log('‚îÄ'.repeat(60))
    console.log(searchResults.substring(0, 300) + '...')
    console.log('‚îÄ'.repeat(60))
    
    // 4. Comparar con b√∫squeda sin optimizaci√≥n
    console.log('\nüÜö Comparando con b√∫squeda sin optimizaci√≥n...')
    
    const unoptimizedResults = await searchService.search(testQuery)
    console.log(`üìè B√∫squeda sin optimizar: ${unoptimizedResults.length} caracteres`)
    console.log(`üìè B√∫squeda optimizada: ${searchResults.length} caracteres`)
    
    // 5. Verificar detecci√≥n de b√∫squeda
    console.log('\nüéØ Probando detecci√≥n de necesidad de b√∫squeda...')
    
    const needsSearch = geminiService.needsRealTimeSearch(testQuery)
    console.log(`üîç ¬øDetecta necesidad de b√∫squeda?: ${needsSearch ? '‚úÖ S√ç' : '‚ùå NO'}`)
    
    if (needsSearch) {
      console.log('‚úÖ Detecci√≥n funcionando correctamente')
    } else {
      console.log('‚ùå PROBLEMA: No detecta la necesidad de b√∫squeda')
    }
    
    // 6. Resumen de mejoras
    console.log('\n‚úÖ RESUMEN DE MEJORAS IMPLEMENTADAS')
    console.log('====================================')
    console.log('‚úÖ Extracci√≥n inteligente de keywords')
    console.log('‚úÖ Queries optimizados para Google Custom Search')
    console.log('‚úÖ Filtrado de palabras irrelevantes')
    console.log('‚úÖ Detecci√≥n mejorada de t√©rminos espec√≠ficos')
    console.log('‚úÖ Manejo de patrones de leyes y regulaciones')
    
    console.log('\nüéØ RESULTADO ESPERADO:')
    console.log('Ahora las b√∫squedas deber√≠an ser m√°s precisas y espec√≠ficas,')
    console.log('retornando informaci√≥n m√°s relevante sobre la consulta exacta')
    console.log('en lugar de resultados gen√©ricos.')
    
    console.log('\nüìã PR√ìXIMO PASO:')
    console.log('Prueba enviando el mensaje al WhatsApp Bot para verificar')
    console.log('que ahora use los keywords optimizados en lugar del mensaje completo.')
    
  } catch (error) {
    console.error('‚ùå Error en prueba de mejoras:', error)
    console.error('üìã Stack:', error.stack)
  }
}

// Ejecutar pruebas
if (require.main === module) {
  testSearchImprovements().catch(console.error)
}

module.exports = { testSearchImprovements }
/**
 * üö® PRUEBA ESPEC√çFICA DEL PROBLEMA REPORTADO
 * Analizar exactamente los casos que el usuario menciona que fallan
 */

const MessageFormatter = require('./server/services/messageFormatter')
const formatter = new MessageFormatter()

console.log('üö® AN√ÅLISIS DEL PROBLEMA ESPEC√çFICO')
console.log('='.repeat(60))
console.log('')

// Recrear EXACTAMENTE el texto problem√°tico que el usuario reporta
const textoProblematicoEspecifico = `BENEFICIOS Y TRUCOS FISCALES ESCONDIDOS: 
Caso: 
Legitimaci√≥n de Capital:
Pr√©stamos intercompa√±√≠a: 
Dividendos: 
Pago de Regal√≠as:`

console.log('‚ùå TEXTO PROBLEM√ÅTICO (TAL COMO APARECE):')
console.log('"' + textoProblematicoEspecifico + '"')
console.log('')

// Aplicar la funci√≥n normalizeForWhatsApp()
const resultado = formatter.normalizeForWhatsApp(textoProblematicoEspecifico)

console.log('üîß RESULTADO DESPU√âS DE normalizeForWhatsApp():')
console.log('"' + resultado + '"')
console.log('')

console.log('üîç AN√ÅLISIS L√çNEA POR L√çNEA:')
console.log('-'.repeat(40))
resultado.split('\n').forEach((linea, index) => {
  const espaciosAntes = linea.length - linea.trimStart().length
  console.log(`${index + 1}: [${espaciosAntes} espacios] "${linea}"`)
})

console.log('')
console.log('üß™ VERIFICACIONES ESPEC√çFICAS:')
console.log('-'.repeat(40))

const verificaciones = [
  {
    nombre: 'T√≠tulo principal numerado',
    actual: resultado.includes('**1. BENEFICIOS Y TRUCOS FISCALES ESCONDIDOS:**'),
    esperado: 'Deber√≠a ser: **1. BENEFICIOS Y TRUCOS FISCALES ESCONDIDOS:**'
  },
  {
    nombre: 'Subt√≠tulos con vi√±etas',
    actual: resultado.includes('‚Ä¢ **Caso:**'),
    esperado: 'Deber√≠a ser: ‚Ä¢ **Caso:**'
  },
  {
    nombre: 'Alineaci√≥n izquierda',
    actual: !resultado.includes('   ') && !resultado.includes('  ‚Ä¢'),
    esperado: 'Sin espacios extra al inicio'
  },
  {
    nombre: 'Separaci√≥n entre elementos',
    actual: resultado.includes('\n\n'),
    esperado: 'Saltos de l√≠nea dobles para separaci√≥n'
  }
]

verificaciones.forEach((v, index) => {
  const resultado = v.actual ? '‚úÖ CORRECTO' : '‚ùå FALLA'
  console.log(`${index + 1}. ${v.nombre}: ${resultado}`)
  if (!v.actual) {
    console.log(`   ${v.esperado}`)
  }
})

console.log('')
console.log('üîß PRUEBA DE PATRONES REGEX:')
console.log('-'.repeat(40))

// Probar el patr√≥n principal para t√≠tulos
const patronTitulos = /^([A-Z√Å√â√ç√ì√ö][A-Z√Å√â√ç√ì√ö\s]{15,}):(?!\*)\s*$/gm
const matchesTitulos = textoProblematicoEspecifico.match(patronTitulos)
console.log('Patr√≥n t√≠tulos detecta:', matchesTitulos)

// Probar el patr√≥n para subt√≠tulos
const patronSubtitulos = /^\s*([A-Z][a-z√°√©√≠√≥√∫][^:]{8,40}):(?!\*)/gm
const matchesSubtitulos = textoProblematicoEspecifico.match(patronSubtitulos)
console.log('Patr√≥n subt√≠tulos detecta:', matchesSubtitulos)

console.log('')
console.log('üí° DIAGN√ìSTICO:')
console.log('-'.repeat(40))
if (!matchesTitulos) {
  console.log('‚ùå El patr√≥n de t√≠tulos NO detecta el t√≠tulo principal')
  console.log('   Posible causa: longitud m√≠nima o caracteres especiales')
}
if (!matchesSubtitulos) {
  console.log('‚ùå El patr√≥n de subt√≠tulos NO detecta los elementos')
  console.log('   Posible causa: criterios muy restrictivos')
}

console.log('')
console.log('üéØ TEXTO QUE DEBER√çAMOS OBTENER:')
console.log('-'.repeat(40))
const textoEsperado = `**1. BENEFICIOS Y TRUCOS FISCALES ESCONDIDOS:**

‚Ä¢ **Caso:**

‚Ä¢ **Legitimaci√≥n de Capital:**

‚Ä¢ **Pr√©stamos intercompa√±√≠a:**

‚Ä¢ **Dividendos:**

‚Ä¢ **Pago de Regal√≠as:**`

console.log(textoEsperado)
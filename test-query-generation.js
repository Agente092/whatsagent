/**
 * SCRIPT DE PRUEBA ESPEC√çFICO PARA QUERIES DE B√öSQUEDA
 * 
 * Este script valida que los queries de b√∫squeda se generen correctamente
 * para casos espec√≠ficos como "Beautiful Bill tax"
 */

// Cargar variables de entorno desde .env
require('dotenv').config()

const GeminiService = require('./server/services/gemini')
const KnowledgeBase = require('./server/services/knowledgeBase')

async function testQueryGeneration() {
  console.log('üîç PRUEBA DE GENERACI√ìN DE QUERIES DE B√öSQUEDA')
  console.log('===============================================\n')
  
  try {
    // Crear instancias de servicios
    console.log('üì¶ Inicializando servicios...')
    const knowledgeBase = new KnowledgeBase()
    const geminiService = new GeminiService(null, null, knowledgeBase)
    
    // Casos de prueba UNIVERSALES para cualquier tipo de b√∫squeda
    const testCases = [
      {
        message: 'Sabes de c√≥mo podr√≠a usar la ley Beautiful Bill tax a mi favor?',
        description: 'Ley espec√≠fica con intenci√≥n de uso',
        shouldContain: ['beautiful', 'bill', 'tax']
      },
      {
        message: 'Investiga bien sobre la One Beautiful Bill tax',
        description: 'Ley espec√≠fica para investigaci√≥n',
        shouldContain: ['beautiful', 'bill', 'tax']
      },
      {
        message: 'Informaci√≥n sobre la nueva ley de Bukele en El Salvador',
        description: 'Ley de otro presidente/pa√≠s',
        shouldContain: ['ley', 'bukele', 'salvador']
      },
      {
        message: 'Qu√© sabes sobre las reformas de Milei en Argentina 2024',
        description: 'Reformas de presidente argentino',
        shouldContain: ['reformas', 'milei', 'argentina']
      },
      {
        message: 'Como afecta la nueva regulaci√≥n de la UE sobre criptomonedas',
        description: 'Regulaci√≥n europea',
        shouldContain: ['regulaci√≥n', 'criptomonedas']
      },
      {
        message: 'Estrategias fiscales para inversiones en bienes ra√≠ces Miami',
        description: 'Consulta de inversi√≥n espec√≠fica',
        shouldContain: ['fiscales', 'inversiones', 'miami']
      },
      {
        message: '√öltimas noticias sobre la reforma tributaria Colombia',
        description: 'Consulta de noticias recientes',
        shouldContain: ['reforma', 'tributaria', 'colombia']
      },
      {
        message: 'Como registrar empresa en Lima',
        description: 'Consulta local simple',
        shouldContain: ['registrar', 'empresa', 'lima']
      }
    ]
    
    console.log('üß™ EJECUTANDO CASOS DE PRUEBA...\n')
    
    for (let i = 0; i < testCases.length; i++) {
      const testCase = testCases[i]
      console.log(`üìù CASO ${i + 1}: ${testCase.description}`)
      console.log(`üí¨ Mensaje: "${testCase.message}"`)
      
      // Generar query optimizado
      const generatedQuery = geminiService.extractSearchKeywords(testCase.message)
      
      console.log(`üéØ T√©rminos esperados: [${testCase.shouldContain.join(', ')}]`)
      console.log(`ü§ñ Query generado: "${generatedQuery}"`)
      
      // Verificar si contiene los t√©rminos esperados
      const containsExpected = testCase.shouldContain.some(term => 
        generatedQuery.toLowerCase().includes(term.toLowerCase())
      )
      
      if (containsExpected && generatedQuery.length > 5) {
        console.log('‚úÖ QUERY CORRECTO - Contiene t√©rminos relevantes')
      } else {
        console.log('‚ùå QUERY NECESITA MEJORA')
        console.log(`üîß Raz√≥n: ${!containsExpected ? 'No contiene t√©rminos esperados' : 'Query muy corto'}`)
      }
      
      // Verificar detecciones adicionales
      const needsRealTime = geminiService.needsRealTimeSearch(testCase.message)
      const crossBorderAnalysis = geminiService.detectCrossBorderOpportunity(testCase.message)
      
      console.log(`üîç Detecci√≥n b√∫squeda tiempo real: ${needsRealTime ? 'S√ç' : 'NO'}`)
      console.log(`üöÄ Detecci√≥n transfronteriza: ${crossBorderAnalysis.hasOpportunity ? 'S√ç' : 'NO'} (${crossBorderAnalysis.confidence}%)`)
      
      console.log('\n' + '‚îÄ'.repeat(80) + '\n')
    }
    
    // Prueba adicional: verificar que queries no espec√≠ficos funcionen
    console.log('üîß PRUEBA ADICIONAL: Queries no espec√≠ficos\n')
    
    const generalCases = [
      'como registrar empresa en Lima',
      'que es SUNARP',
      'inversiones en bienes raices Peru'
    ]
    
    for (const message of generalCases) {
      console.log(`üí¨ Mensaje: "${message}"`)
      const query = geminiService.extractSearchKeywords(message)
      console.log(`üéØ Query generado: "${query}"`)
      
      if (query.length > 3 && !query.includes('undefined')) {
        console.log('‚úÖ Query v√°lido')
      } else {
        console.log('‚ùå Query problem√°tico')
      }
      console.log('')
    }
    
    console.log('‚úÖ RESUMEN DE PRUEBAS DEL SISTEMA UNIVERSAL')
    console.log('============================================')
    console.log('‚ú® Si los queries generan t√©rminos relevantes para CUALQUIER tipo de consulta,')
    console.log('entonces tenemos un sistema verdaderamente inteligente y flexible.')
    console.log('')
    console.log('üéØ CARACTER√çSTICAS DEL SISTEMA MEJORADO:')
    console.log('‚úÖ No hardcodea nombres espec√≠ficos (Trump, Biden, etc.)')
    console.log('‚úÖ Funciona para cualquier presidente, pol√≠tico o entidad')
    console.log('‚úÖ Detecta patrones universales (ley, bill, reforma, etc.)')
    console.log('‚úÖ Optimiza autom√°ticamente seg√∫n el tipo de consulta')
    console.log('‚úÖ Extracci√≥n inteligente de nombres propios din√°mica')
    console.log('')
    console.log('üìã PR√ìXIMO PASO:')
    console.log('Ejecuta nuevamente el servidor WhatsApp y prueba con CUALQUIER consulta:')
    console.log('- "Qu√© sabes de la nueva ley de Bukele"')
    console.log('- "Reformas de Milei en Argentina"')
    console.log('- "Regulaciones de la UE sobre IA"')
    console.log('- "Pol√≠ticas de Xi Jinping"')
    console.log('‚ú® ¬°El sistema debe funcionar para TODAS!')
    
  } catch (error) {
    console.error('‚ùå Error en prueba:', error)
    console.error('üìã Stack:', error.stack)
  }
}

// Ejecutar pruebas
if (require.main === module) {
  testQueryGeneration().catch(console.error)
}

module.exports = { testQueryGeneration }
/**
 * üß™ TEST: VERIFICACI√ìN DE ANTICIPACI√ìN DE RIESGOS
 * Probar que el agente ahora incluye anticipaci√≥n proactiva de riesgos y dificultades
 */

require('dotenv').config()

const GeminiService = require('./server/services/gemini')
const KnowledgeBase = require('./server/services/knowledgeBase')

async function testRiskAnticipation() {
  console.log('üß™ TEST: ANTICIPACI√ìN PROACTIVA DE RIESGOS')
  console.log('==========================================\n')
  
  try {
    console.log('üì¶ Inicializando servicios...')
    const knowledgeBase = new KnowledgeBase()
    const geminiService = new GeminiService(null, null, knowledgeBase)
    
    // Casos de prueba que deben incluir anticipaci√≥n de riesgos
    const testCases = [
      {
        query: "quiero crear una estructura offshore en Panam√°",
        expectedRisks: [
          "riesgos regulatorios",
          "auditor√≠as",
          "compliance",
          "reputacional",
          "SUNAT"
        ]
      },
      {
        query: "como puedo usar criptomonedas para mi negocio",
        expectedRisks: [
          "volatilidad",
          "regulaci√≥n",
          "lavado de dinero",
          "UIF",
          "registro"
        ]
      },
      {
        query: "estrategias de apalancamiento extremo",
        expectedRisks: [
          "sobreendeudamiento",
          "garant√≠as",
          "tasas de inter√©s",
          "liquidez",
          "incumplimiento"
        ]
      }
    ]
    
    console.log('üîç Verificando que las instrucciones incluyen anticipaci√≥n de riesgos...\n')
    
    for (let i = 0; i < testCases.length; i++) {
      const testCase = testCases[i]
      console.log(`üìù CASO ${i + 1}: "${testCase.query}"`)
      console.log('‚îÄ'.repeat(60))
      
      // Generar prompt con las nuevas instrucciones
      const conversationContext = { hasHistory: false, context: '', stage: 'initial', currentTopic: null }
      const intent = 'financial_crime_query'
      
      const prompt = await geminiService.buildEnhancedPromptWithPersonality(
        testCase.query,
        'test context',
        conversationContext,
        intent,
        null, // personalityInstructions
        null, // humanReasoningResult
        { name: 'Cliente Test' },
        { name: 'GHS', representative: { name: 'Luis G.' } }
      )
      
      // Verificar que el prompt incluye las nuevas instrucciones de riesgo
      console.log('üîç Verificando instrucciones de anticipaci√≥n de riesgos...')
      
      const hasRiskInstructions = [
        'ANTICIPACI√ìN PROACTIVA DE RIESGOS',
        'SIEMPRE IDENTIFICA Y MENCIONA los riesgos potenciales',
        'M√âTODOS ESPEC√çFICOS para prevenir, mitigar o superar',
        'PLANES DE CONTINGENCIA espec√≠ficos',
        'SE√ëALES DE ALERTA temprana',
        'ESTRATEGIAS DE MITIGACI√ìN'
      ]
      
      let foundInstructions = 0
      hasRiskInstructions.forEach(instruction => {
        if (prompt.includes(instruction)) {
          foundInstructions++
        }
      })
      
      if (foundInstructions >= 4) {
        console.log('‚úÖ INSTRUCCIONES DE RIESGO INCLUIDAS EN PROMPT')
        console.log(`üìä Encontradas ${foundInstructions}/${hasRiskInstructions.length} instrucciones`)
      } else {
        console.log('‚ùå FALTAN INSTRUCCIONES DE RIESGO EN PROMPT')
        console.log(`üìä Solo ${foundInstructions}/${hasRiskInstructions.length} instrucciones encontradas`)
      }
      
      // Verificar estructura de respuesta incluye riesgos
      const hasRiskFormat = prompt.includes('ANTICIPACI√ìN DE RIESGOS') && 
                           prompt.includes('MEDIDAS PREVENTIVAS') && 
                           prompt.includes('PLANES DE CONTINGENCIA')
      
      if (hasRiskFormat) {
        console.log('‚úÖ FORMATO DE RESPUESTA INCLUYE SECCIONES DE RIESGO')
      } else {
        console.log('‚ùå FORMATO DE RESPUESTA NO INCLUYE SECCIONES DE RIESGO')
      }
      
      console.log('\nüéØ EXPECTATIVA PARA RESPUESTA REAL:')
      console.log('El agente deber√≠a ahora incluir autom√°ticamente:')
      console.log('‚Ä¢ Identificaci√≥n proactiva de riesgos espec√≠ficos')
      console.log('‚Ä¢ M√©todos para prevenir cada riesgo identificado')
      console.log('‚Ä¢ Soluciones tanto legales como en zona gris')
      console.log('‚Ä¢ Planes de contingencia para escenarios adversos')
      console.log('‚Ä¢ Se√±ales de alerta temprana')
      console.log('‚Ä¢ Medidas de protecci√≥n adicionales')
      
      console.log('\n' + '='.repeat(80) + '\n')
    }
    
    console.log('üìä RESUMEN DE MEJORAS IMPLEMENTADAS:')
    console.log('====================================')
    console.log('‚úÖ 1. Instrucciones de anticipaci√≥n de riesgos agregadas')
    console.log('‚úÖ 2. Metodolog√≠as preventivas incluidas')
    console.log('‚úÖ 3. Planes de contingencia incorporados')
    console.log('‚úÖ 4. Soluciones legales e ilegales especificadas')
    console.log('‚úÖ 5. Formato de respuesta actualizado con secciones de riesgo')
    
    console.log('\nüöÄ BENEFICIOS ESPERADOS:')
    console.log('========================')
    console.log('üéØ PROACTIVIDAD: El agente anticipar√° problemas antes de que ocurran')
    console.log('üõ°Ô∏è PROTECCI√ìN: Proporcionar√° medidas preventivas espec√≠ficas')
    console.log('üé™ EXPERTISE: Demostrar√° conocimiento profundo al prever dificultades')
    console.log('üîß SOLUCIONES: Ofrecer√° m√∫ltiples alternativas para cada riesgo')
    console.log('üìã COMPLETITUD: Respuestas m√°s integrales y valiosas')
    
    console.log('\nüìã PR√ìXIMO PASO:')
    console.log('Reiniciar servidor y probar con consulta real para verificar que')
    console.log('el agente ahora incluye autom√°ticamente anticipaci√≥n de riesgos.')
    
  } catch (error) {
    console.error('‚ùå Error en test:', error)
  }
}

// Ejecutar test
testRiskAnticipation()
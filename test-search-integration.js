/**
 * üîç SCRIPT DE PRUEBA: INTEGRACI√ìN B√öSQUEDA + IA
 * Prueba espec√≠ficamente el flujo completo desde b√∫squeda hasta respuesta final
 */

require('dotenv').config()

const GeminiService = require('./server/services/gemini')
const KnowledgeBase = require('./server/services/knowledgeBase')
const InternetSearchService = require('./server/services/internetSearch')

async function testSearchIntegration() {
  console.log('üîç PRUEBA DE INTEGRACI√ìN: B√öSQUEDA + IA')
  console.log('=======================================\n')
  
  try {
    console.log('üì¶ Inicializando servicios...')
    const knowledgeBase = new KnowledgeBase()
    const geminiService = new GeminiService(null, null, knowledgeBase)
    const searchService = new InternetSearchService()
    
    // Simular el mensaje problem√°tico EXACTO
    const testMessage = "Tienes conocimiento sobre la ley One Beautiful Bill tax?"
    
    console.log(`üìù Mensaje de prueba: "${testMessage}"\n`)
    
    // PASO 1: Verificar detecci√≥n de b√∫squeda
    console.log('üîç PASO 1: Verificando detecci√≥n de b√∫squeda...')
    const needsSearch = geminiService.needsRealTimeSearch(testMessage)
    console.log(`   Resultado: ${needsSearch ? '‚úÖ S√ç detecta b√∫squeda' : '‚ùå NO detecta b√∫squeda'}`)
    
    if (!needsSearch) {
      console.log('‚ùå PROBLEMA: La detecci√≥n de b√∫squeda fall√≥')
      return
    }
    
    // PASO 2: Extraer keywords
    console.log('\nüéØ PASO 2: Extrayendo keywords...')
    const keywords = geminiService.extractSearchKeywords(testMessage)
    console.log(`   Keywords: "${keywords}"`)
    
    // PASO 3: Realizar b√∫squeda directa
    console.log('\nüåê PASO 3: Realizando b√∫squeda directa...')
    const searchResults = await searchService.search(keywords)
    console.log(`   Longitud de resultados: ${searchResults.length} caracteres`)
    console.log(`   Primeros 200 caracteres: "${searchResults.substring(0, 200)}..."`)
    
    // PASO 4: Crear prompt simulado con resultados
    console.log('\nü§ñ PASO 4: Simulando prompt con resultados de b√∫squeda...')
    
    const mockRealTimeInfo = `\n\nüîç INFORMACI√ìN EN TIEMPO REAL:\n${searchResults}`
    
    // Verificar si el prompt contiene las instrucciones cr√≠ticas
    const prompt = await geminiService.buildEnhancedPromptWithPersonality(
      testMessage,
      '',
      { hasHistory: false, context: '', stage: 'initial', currentTopic: '' },
      'legal_query',
      null,
      null,
      { name: 'luis', phone: '51998148917' },
      { name: 'GHS', representative: { name: 'Luis G.' } }
    )
    
    // Verificar que el prompt contiene las instrucciones de b√∫squeda
    const hasSearchInstructions = prompt.includes('INFORMACI√ìN EN TIEMPO REAL') || 
                                 prompt.includes('ATENCI√ìN: HAS RECIBIDO INFORMACI√ìN')
    
    console.log(`   Prompt contiene instrucciones de b√∫squeda: ${hasSearchInstructions ? '‚úÖ S√ç' : '‚ùå NO'}`)
    
    if (hasSearchInstructions) {
      console.log('   ‚úÖ Las instrucciones de b√∫squeda est√°n presentes en el prompt')
    } else {
      console.log('   ‚ùå PROBLEMA: Las instrucciones de b√∫squeda NO est√°n en el prompt')
    }
    
    // PASO 5: Verificar contenido espec√≠fico en resultados
    console.log('\nüìä PASO 5: Analizando contenido de resultados...')
    
    const hasSpecificInfo = searchResults.toLowerCase().includes('beautiful') ||
                           searchResults.toLowerCase().includes('bill') ||
                           searchResults.toLowerCase().includes('tax')
    
    console.log(`   Contiene informaci√≥n espec√≠fica sobre la ley: ${hasSpecificInfo ? '‚úÖ S√ç' : '‚ùå NO'}`)
    
    if (hasSpecificInfo) {
      console.log('   ‚úÖ Los resultados S√ç contienen informaci√≥n relevante sobre Beautiful Bill')
    } else {
      console.log('   ‚ö†Ô∏è Los resultados pueden no ser lo suficientemente espec√≠ficos')
    }
    
    // PASO 6: An√°lisis final
    console.log('\nüéØ AN√ÅLISIS FINAL DEL PROBLEMA')
    console.log('==============================')
    
    if (needsSearch && hasSearchInstructions && hasSpecificInfo) {
      console.log('‚úÖ El sistema t√©cnico funciona correctamente')
      console.log('‚ùì El problema puede estar en:')
      console.log('   1. La IA no est√° siguiendo las instrucciones del prompt')
      console.log('   2. La informaci√≥n de b√∫squeda no es lo suficientemente clara')
      console.log('   3. Conflicto entre conocimiento base y resultados de b√∫squeda')
      
      console.log('\nüîß RECOMENDACIONES:')
      console.log('==================')
      console.log('1. Hacer las instrucciones de b√∫squeda M√ÅS ENF√ÅTICAS')
      console.log('2. Agregar ejemplos espec√≠ficos en el prompt')
      console.log('3. Penalizar respuestas que ignoren resultados de b√∫squeda')
      
    } else {
      console.log('‚ùå Problema en el flujo t√©cnico:')
      if (!needsSearch) console.log('   - Detecci√≥n de b√∫squeda fallida')
      if (!hasSearchInstructions) console.log('   - Instrucciones de b√∫squeda faltantes')
      if (!hasSpecificInfo) console.log('   - Resultados de b√∫squeda no espec√≠ficos')
    }
    
    console.log('\nüöÄ PR√ìXIMO PASO SUGERIDO:')
    console.log('========================')
    console.log('1. Probar con el servidor reiniciado')
    console.log('2. Verificar que la respuesta ahora use la informaci√≥n de b√∫squeda')
    console.log('3. Si sigue fallando, reforzar m√°s las instrucciones del prompt')
    
  } catch (error) {
    console.error('‚ùå Error en prueba de integraci√≥n:', error)
  }
}

// Ejecutar prueba
testSearchIntegration()